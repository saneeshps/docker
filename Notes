1. Approach 1
	FROM openjdk:8
	RUN addgroup -S spring && adduser -S spring -G spring
	USER spring:spring
	ARG JAR_FILE=target/*.jar
	COPY ${JAR_FILE} docker-demo-1.0.jar
	ENTRYPOINT ["java","-jar","/docker-demo-1.0.jar"]

2. Build
	docker build -t saneeshps/docker-demo .
	docker run -p 8080:8080 docker-demo
	docker run --rm -p 8080:8080 docker-demo

List docker images
	docker images -a
Remove docker image
	docker rmi Image Image
	docker rmi Image docker-demo
	docker images -a | grep "pattern" | awk '{print $3}' | xargs docker rmi
	
Removing Containers
	docker ps -a
	docker rm ID_or_Name ID_or_Name
	you can run docker run --rm to automatically delete it when it exits.

Removing Volumes
	docker volume ls
	docker volume rm volume_name volume_name
	docker volume ls -f dangling=true
	docker volume prune
Remove a container and its volume
	docker rm -v container_name


Docker provides a single command that will clean up any resources — images, containers, volumes, and networks 
— that are dangling (not associated with a container):
	docker system prune
	
To additionally remove any stopped containers and all unused images (not just dangling images), add the -a flag to the command:	
	docker system prune -a
	
Remove dangling images
	Dangling images are layers that have no relationship to any tagged images. They no longer serve a purpose and consume disk space
	docker images -f dangling=true
	docker image prune
	
	



